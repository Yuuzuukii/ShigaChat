import React, { createContext, useState, useEffect } from "react";

export const UserContext = createContext();

const API_BASE_URL = "http://localhost:8000";


export const UserProvider = ({ children }) => {
  const [user, setUser] = useState(() => {
    // üîΩ ÂàùÂõû„É¨„É≥„ÉÄ„É™„É≥„Ç∞ÊôÇ„Å´ localStorage „Åã„Çâ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíÂèñÂæó
    const storedUser = localStorage.getItem("user");
    return storedUser ? JSON.parse(storedUser) : null;
  });

  const [token, setToken] = useState(() => localStorage.getItem("token") || null);
  const [language, setLanguage] = useState("ja");
  const [isLoading, setIsLoading] = useState(true);

  const fetchUser = (currentToken) => {
    if (!currentToken) {
      setUser(null);
      setIsLoading(false);
      return;
    }

    fetch(`${API_BASE_URL}/user/current_user`, {
      headers: { Authorization: `Bearer ${currentToken}` },
    })
      .then((res) => {
        if (res.status === 401) {
          console.warn("‚ö†Ô∏è 401 Unauthorized - „Éà„Éº„ÇØ„É≥„ÇíÂâäÈô§");
          setToken(null);
          localStorage.removeItem("token");
          localStorage.removeItem("user");
          throw new Error("Ë™çË®º„Ç®„É©„Éº: „Éà„Éº„ÇØ„É≥„ÅåÁÑ°Âäπ„Åß„Åô");
        }
        return res.json();
      })
      .then((data) => {
        if (data.id) {
          const userData = {
            id: data.id,
            nickname: data.name,
            spokenLanguage: data.spoken_language,
          };
          setUser(userData);
          setLanguage(data.spoken_language);
          localStorage.setItem("user", JSON.stringify(userData)); // üîΩ „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„Çí‰øùÂ≠ò
        } else {
          throw new Error("„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„Åå‰∏çÂÆåÂÖ®„Åß„Åô");
        }
      })
      .catch((error) => {
        console.error("‚ùå „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÅÆÂèñÂæó„Å´Â§±Êïó:", error);
        setUser(null);
        localStorage.removeItem("user"); // üîΩ ÂèñÂæó„Å´Â§±Êïó„Åó„ÅüÂ†¥Âêà„ÅØÂâäÈô§
      })
      .finally(() => {
        setIsLoading(false);
      });
  };

  useEffect(() => {
    if (!token) {
      setIsLoading(false);
      return;
    }
    fetchUser(token);
  }, [token]);

  useEffect(() => {
    if (user && user.spokenLanguage) {
      setLanguage(user.spokenLanguage);
    }
  }, [user]);

  const logout = () => {
    localStorage.removeItem("token");
    localStorage.removeItem("user");
    setToken(null);
    setUser(null);
    setLanguage("ja");

    if (typeof window !== "undefined") {
      window.dispatchEvent(new Event("userLoggedOut"));
    }
  };

  return (
    // UserProvider „ÅÆ return „ÅÆ„Å®„Åì„Çç
    <UserContext.Provider
      value={{
        user,
        token,
        isLoading,
        language,
        setLanguage,
        setUser,
        setToken,
        logout,
        fetchUser, // üîΩ ËøΩÂä†ÔºÅ
      }}
    >
      {children}
    </UserContext.Provider>
  );
};
